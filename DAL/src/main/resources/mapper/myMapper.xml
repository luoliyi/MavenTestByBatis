<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="com.zhangguo.mybatis01.dao.studentMapper"就是com.zhangguo.mybatis01.dao(包名)+studentMapper(studentMapper.xml文件去除后缀)
-->
<!--这里的namespace 是自定义的，保证唯一就可以-->
<mapper namespace="com.nf.mybatis.doAction">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为selectStudentById，id属性值必须是唯一的，不能够重复
 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
resultType="com.zhangguo.mybatis01.entities.Student"就表示将查询结果封装成一个Student类的对象返回
Student类就是student表所对应的实体类
-->
    <!--根据ID查询单个-->
    <select id="selectUserByUid" parameterType="int" resultType="mybatis.Entity.User">
        select * from information where uid = #{uid}
    </select>

    <!--根据姓名查询单个-->
    <select id="selectUserByName" resultType="mybatis.Entity.User">
        select * from information where uname=#{uname}
    </select>

    <!--查询结果集，用于多表查询-->
    <resultMap id="seeShare" type="mybatis.Entity.User">
        <result column="uid" property="uid" />
        <result column="uname" property="uname" />
        <result column="uage" property="uage" />
        <result column="usex" property="usex" />
        <result column="udesc" property="udesc" />
    </resultMap>
    <!--查询全部-->
    <select id="selectAll" resultMap="seeShare">
        select * from information;
    </select>

    <!--查询全部2-->
    <select id="simpleSelectAll" resultType="mybatis.Entity.User">
        select * from information;
    </select>

    <!--分页查询-->
    <select id="selectByPage" resultType="mybatis.Entity.User">
        select * from information limit #{pageno},#{limit};
    </select>

    <!--模糊查询-->
    <select id="moSelect" resultType="mybatis.Entity.User" parameterType="String">
        select * from information where uname like '%${value}%';
    </select>

    <!--模糊查询2,指定参数是String类型-->
    <select id="moSelect2" resultType="mybatis.Entity.User" parameterType="String">
        select * from information
        <where>
            <if test="uname!=null">
                uname like '%${uname}%'
            </if>
        </where>
    </select>

    <!--新增-->
    <insert id="addUser" parameterType="mybatis.Entity.User" useGeneratedKeys="true" keyProperty="uid">
       insert into information(uname,uage,usex,udesc) values(#{uname},#{uage},#{usex},#{udesc})
    </insert>

    <!--新增数据后返回新增的数据-->
    <insert id="addUserReturnInfo" parameterType="mybatis.Entity.User" useGeneratedKeys="true" keyProperty="uid">
        /*在插入之后查询出最近的id返回，重写返回的结果，而不再是返回影响行数*/
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="uid">
            SELECT LAST_INSERT_ID() AS uid;
        </selectKey>
        insert into information(uname,uage,usex,udesc) values(#{uname},#{uage},#{usex},#{udesc});
    </insert>

    <!--修改-->
    <update id="updateUser" parameterType="mybatis.Entity.User" >
        update information set uname=#{uname},uage=#{uage},usex=#{usex},udesc=#{udesc} where uid=#{uid}
    </update>

    <!--删除-->
    <delete id="deleteUser" parameterType="int">
        delete from information where uid=#{uid}
    </delete>


    <!--复杂操作-->
    <select id="selectWithIf" resultType="User">
        select * from information
        <where>
           /* uname就是你传入的参数*/
            <if test="uname!=null">
                 uname like '%${uname}%'
            </if>
            <if test="usex!=null">
                and usex = #{usex}
            </if>
            <if test="uage!=null">
                and uage>#{uage}
            </if>
        </where>
    </select>

    <!--复杂查询操作2-->
    <select id="selectByLimit" resultType="user">
        select * from information
        <where>
            <if test="uname!=null">
                uname like '%${uname}%'
            </if>
            <if test="uage">
                and uage>#{uage}
            </if>
            <if test="usex">
                and usex=#{usex}
            </if>
        </where>
    </select>

    <!--复杂操作3，in 查询 if判断-->
    <select id="selectWithIn" parameterType="java.util.List" resultType="mybatis.Entity.User">
        select * from information
        <where>
            <if test="list!=null and list.size() gt 0">
                uid in
                <foreach collection="list" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <!--复杂操作4，根据id 查询不包括里面的加条件-->
    <select id="selectWithInAndMoreLimit" parameterType="java.util.Map" resultType="mybatis.Entity.User">
        select * from information
        <where>
            <if test="ids!=null and ids.size() gt 0">
                uid in
                <foreach collection="ids" item="uid" open="(" separator="," close=")">
                    #{uid}
                </foreach>
            </if>
            <if test="uname!=null">
                and uname like '%${uname}%'
            </if>
            <if test="uage!=null and uage gt 0">
                and uage>#{uage}
            </if>
            <if test="usex!=null">
                and usex=#{usex}
            </if>
        </where>
    </select>


</mapper>